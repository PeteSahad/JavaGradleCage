/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javagradlecage;

import tech.tablesaw.api.DoubleColumn;
import tech.tablesaw.api.Row;
import tech.tablesaw.api.StringColumn;
import tech.tablesaw.api.Table;

public class App {

    static Integer N_MFCC = 26;

    public static void main(String[] args) throws Exception {

        String audio_file_path = "data/audio_test/Wu0427";

        // Create DataFrame
        String[] col_names = {"Bin_No","Cough_No","Win_No","ZCR","Kurtosis","LogE"};
        StringColumn feat_colNames = StringColumn.create("feat_colNames", col_names);

        for (int i = 1; i < N_MFCC+1; i++) {
            feat_colNames.append("MFCC_"+i);
        }
        for (int i = 1; i < N_MFCC+1; i++) {
            feat_colNames.append("MFCC_D_"+i);
        }
        for (int i = 1; i < N_MFCC+1; i++) {
            feat_colNames.append("MFCC_2D_"+i);
        }

        for (String string : feat_colNames) {
            System.out.println(string);
        }


    }

    private static float[][] matrixSubtract(float[][] source, float[] substract){
        float[][] results = new float[source.length][source[0].length];

        for (int i = 0; i < source.length; i++) {
            for (int j = 0; j < source[i].length; j++) {
                results[i][j] = (source[i][j] - substract[i]);
            }
        }

        return results;
    }

    public static double[][] convertFloatsToDoubles2D(float[][] input){
        if (input == null)
        {
            return null; // Or throw an exception - your choice
        }
        double[][] output = new double[input.length][input[0].length];
        for (int i = 0; i < input.length; i++)
        {
            for (int j = 0; i < input.length; j++)
            {
                output[i][j] = input[i][j];
            }
        }
        return output;
    }

    public static double[] convertFloatsToDoubles(float[] input){
        if (input == null)
        {
            return null; // Or throw an exception - your choice
        }
        double[] output = new double[input.length];
        for (int i = 0; i < input.length; i++)
        {
            output[i] = input[i];
        }
        return output;
    }

}
